#!/bin/bash


########################################################################## VARIABLES #######################################################################

path_to_app=~/Documents/rest_app/demo
path=$(pwd)
name_app=demo

dockerfile=Dockerfile-trusted
image_name=romainplt/demo
poids=1
taille=1
scone_heap=2G

secret=mySecret
key=myKey

########################################################################## FUNCTIONS #######################################################################

usage()
{
	echo "  
	
	Run you app in a local CAS.
	
		./run_demo [-tag] 
		./run_demo -p ~/path/to/app/ -n my_app -b gradle	
		
		-p --poids
		-t --taille 
		-s --SCONE_HEAP     Modifie la SCONE_HEAP. xG giga / xM mega / xK kilo / x octets 
		-a --path_to_app    Absolute path. You need to have a docker-compose in the folder you point. Default: ~/Documents/rest\ app/demo
		-n --name           Your app's name need to be the one you use to run docker-compose? Default: demo   
		-d --dockerfile     Default: Dockerfile-trusted (only for docker)
		-i --image_name     Image name for building in docker. Default: romainplt/demo (only for docker)
		"
}	
	
	
remove_docker_containers()
{
	echo "Here are your current containers (not always running) : "
	yesorno=yes
	while [ $yesorno = yes ]; do
		docker ps -a --format "table {{.Image}}\t{{.Names}}\t{{.Status}}"
		echo " "
		echo "Do you want to stop/rm one or several ? (y/n)"
		read answer

		if [ $answer = y ] || [ $answer = yes ] || [ $answer = Y ]; then
			yesorno=yes
			echo "write 'all' if you want to remove them all. Or write one name."
			read container
			
			if [ $container = all ]; then
				echo "Removing all containers ..."
				docker stop $(docker ps -a -q)
		                docker rm $(docker ps -a -q)
		                yesorno=no
			else
				echo "removing container $container"
				docker stop $container 
				docker rm $container
				echo " "
			fi
		else 
			yesorno=no
		fi
	done
		
}


build()
{ 

	echo " "
	echo "Gradle ..."
	echo "Killing old app container ..."
	if [ $(docker ps -qa -f name=demo) ]; then
		docker stop demo						
		docker rm demo
	fi


	echo "Building image ..."

	cd $path_to_app

	./gradlew build buildImage
	echo " "

	echo "Building image ..."
	cd $path_to_app
	rm dockerlogs.txt
	
	docker build --file $dockerfile --no-cache --build-arg JAR_FILE=build/libs/*.jar -t $image_name . >> dockerlogs.txt
	
	echo " "
	
	
}

get_mr_enclave()
{
	cd $path_to_app
	
	echo "Getting MrEnclave ..."
	mr_enclave=$(sed -n 17p dockerlogs.txt)
	echo "MrEnclave is : $mr_enclave"
	
#	rm logs.txt
#	sleep 1
#	echo "Running demo ..."
#	docker-compose up -d 
#	sleep 10
#	docker-compose logs >> logs.txt
#	#cat logs.txt
#	echo " "
#	echo "Getting Enclave Hash when running ..."
#	mr=$(cat logs.txt | grep Enclave)
#	#echo "$mr"
#	mr2=${mr#*:}
#	#echo "$mr2"
#	mr_compare=${mr2:1}
#	echo "Enclave hash when running app is : $mr_compare"
#	echo " "
#	echo "Killing demo again"
#	docker stop $name_app
#	docker rm $name_app
	
}

#mr_enclave_compare()
#{
#	if [ $mr_enclave = $mr_compare ]; then
#		echo "Good news ! MrEnclaves are the same !"
#	else
#		echo "Pas le même hash mais c'est normal ça dépend de la HEAP_SIZE et tout a bougé"
#	fi
#		
#}

create_session()
{
	cd $path

	#create session à partir du mr enclave et tout et tout
	echo " "
	echo "Creating session ..."

	sessionfile="session.yml"

	if [ -f "$sessionfile" ]; then
	        rm session.yml
	fi

	touch session.yml

	echo "
name: session_demo
services:
  - name: demo
    image_name: romainplt/demo
    mrenclaves: [$mr_enclave]
    pwd: /
    command: 'java -jar /app.jar'
    environment:
      CLASSPATH: '/'
      SCONE_MODE: hw
      JAVA_TOOL_OPTIONS: '-Xmx256m'
      LD_LIBRARY_PATH: '/usr/lib/jvm/java-11-openjdk/lib/server:/usr/lib/jvm/java-11-openjdk/lib:/usr/lib/jvm/java-11-openjdk/../lib'
      SECRET_POIDS: $poids
      SECRET_TAILLE: $taille
      SECRET: $secret
      KEY: $key" >> session.yml
						     	
	cat session.yml

}

attest_cas()
{
	echo " "
	cd $path
	source start_cas -l -f cas_las_scone/
}

push_session_to_cas()
{
	#push session to cas from sconecli image
	cd $path
	echo " "
	echo "ET LE CHEMIN :"
	echo "$path"
	echo "Pushing session ..."
	rm sessionId.txt	
	docker exec -it scone sh -c "cd home && curl -k -s --cert conf/client.crt --key conf/client-key.key --data-binary @session.yml -X POST https://cas:8081/session" >> sessionId.txt
	session_id=$(cat sessionId.txt | grep hash)
	session_id=${session_id%*??}
	session_id=${session_id:11}
	echo "Session's id is : $session_id"
	
	rm sessionId.txt 
	
	echo $session_id >> sessionId.txt
	cat sessionId.txt
	
	file="session.txt"	

	if [ -f "$file" ]; then
		rm session.txt 
	fi
	echo "Pushing session info in session.txt"
	docker exec -it scone sh -c "cd home && curl -k -s --cert conf/client.crt --key conf/client-key.key https://cas:8081/session/session_demo" >> session.txt
}

get_info()
{	
	cd $path
	
	echo " "
	echo "Getting Mr Enclave from session ..."
	
	hash1=$(cat session.yml | grep mrenclaves)
	hash2=${hash1:17}
	if [ "${hash2:0:1}" = "[" ]; then
		hash2=${hash2:1}
	fi
	hash3=${hash2%m*}
	hash4=${hash3%]*}
	echo "	MrEnclave got : $hash4"
	echo " "
}

verify_session_in_cas()
{

	echo " "
	cd $path
	echo "creating docker compose ..."
	
	rm docker-compose.yml
	
	touch docker-compose.yml
	echo "
version: '3.4'
services: 
  demo: 
    image: romainplt/demo
    container_name: demo
    ports:
      - 8080:8080
    devices: 
      - /dev/isgx
    volumes:
      - demo:/tmp/demo:rw
    environment:
      - SCONE_LAS_ADDR=las
      - SCONE_CONFIG_ID=session_demo/demo      
      - SCONE_LOG=7
      - SCONE_MODE=hw
      - SCONE_HEAP=$scone_heap
      - SCONE_CAS_ADDR=cas
      - SCONE_ALPINE=1
      - SCONE_FORK=1
      - SCONE_SESSION_ID=session_demo
      
    networks:
      - romain-net

volumes:
  demo:
    external: true

networks:
  romain-net:
    external: true">>docker-compose.yml
      
      echo " "
      echo "Running $name_app"
      docker-compose run --service-ports demo
      
      
}

################################################################### SCRIPT ##########################################################################

if [ "$1" == "" ]; then
	usage
	exit
fi

while [ "$1" != "" ]; do
	case $1 in
		--SCONE_HEAP )
			shift
			scone_heap=$1
			;;
		-a | --path_to_app )
			shift
			path_to_app=$1
			;;
		-n | --name )
			shift
			name_app=$1
			;;
		-d | --dockerfile )
			shift 
			dockerfile=$1
			;;
		-i | --image_name )
			shift
			image_name=$1
			;;
		-t | --taille )
			shift 
			taille=$1
			;;
		-p | --poids )
			shift
			poids=$1
			;;
		-s | --secret )
			shift
			secret=$1
			;;
		-k | --key )
			shift
			key=$1
			;;
		-h | --help )
			usage
			exit
			;;
		* ) 	usage
			exit
			;;
			
	esac
	shift
done

remove_docker_containers

build

get_mr_enclave

sleep 2

create_session

attest_cas

push_session_to_cas

get_info

verify_session_in_cas

# c'est déjà bien
